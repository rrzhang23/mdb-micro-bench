// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lock_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lock_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lock_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lock_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lock_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lock_5fservice_2eproto;
class BuildConnRequest;
class BuildConnRequestDefaultTypeInternal;
extern BuildConnRequestDefaultTypeInternal _BuildConnRequest_default_instance_;
class BuildConnResponse;
class BuildConnResponseDefaultTypeInternal;
extern BuildConnResponseDefaultTypeInternal _BuildConnResponse_default_instance_;
class DDSLockRequest;
class DDSLockRequestDefaultTypeInternal;
extern DDSLockRequestDefaultTypeInternal _DDSLockRequest_default_instance_;
class DDSLockResponse;
class DDSLockResponseDefaultTypeInternal;
extern DDSLockResponseDefaultTypeInternal _DDSLockResponse_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
class ValidRequest;
class ValidRequestDefaultTypeInternal;
extern ValidRequestDefaultTypeInternal _ValidRequest_default_instance_;
class ValidResponse;
class ValidResponseDefaultTypeInternal;
extern ValidResponseDefaultTypeInternal _ValidResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BuildConnRequest* Arena::CreateMaybeMessage<::BuildConnRequest>(Arena*);
template<> ::BuildConnResponse* Arena::CreateMaybeMessage<::BuildConnResponse>(Arena*);
template<> ::DDSLockRequest* Arena::CreateMaybeMessage<::DDSLockRequest>(Arena*);
template<> ::DDSLockResponse* Arena::CreateMaybeMessage<::DDSLockResponse>(Arena*);
template<> ::EchoRequest* Arena::CreateMaybeMessage<::EchoRequest>(Arena*);
template<> ::EchoResponse* Arena::CreateMaybeMessage<::EchoResponse>(Arena*);
template<> ::ValidRequest* Arena::CreateMaybeMessage<::ValidRequest>(Arena*);
template<> ::ValidResponse* Arena::CreateMaybeMessage<::ValidResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EchoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {}
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kInsIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 ins_id = 1;
  void clear_ins_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id() const;
  void set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ins_id() const;
  void _internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:EchoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EchoResponse) */ {
 public:
  inline EchoResponse() : EchoResponse(nullptr) {}
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(nullptr);
  }

  EchoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EchoResponse";
  }
  protected:
  explicit EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:EchoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BuildConnRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildConnRequest) */ {
 public:
  inline BuildConnRequest() : BuildConnRequest(nullptr) {}
  virtual ~BuildConnRequest();

  BuildConnRequest(const BuildConnRequest& from);
  BuildConnRequest(BuildConnRequest&& from) noexcept
    : BuildConnRequest() {
    *this = ::std::move(from);
  }

  inline BuildConnRequest& operator=(const BuildConnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildConnRequest& operator=(BuildConnRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildConnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildConnRequest* internal_default_instance() {
    return reinterpret_cast<const BuildConnRequest*>(
               &_BuildConnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuildConnRequest& a, BuildConnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildConnRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildConnRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildConnRequest* New() const final {
    return CreateMaybeMessage<BuildConnRequest>(nullptr);
  }

  BuildConnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildConnRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildConnRequest& from);
  void MergeFrom(const BuildConnRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildConnRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildConnRequest";
  }
  protected:
  explicit BuildConnRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsIdFieldNumber = 1,
    kInsPortFieldNumber = 2,
  };
  // int32 ins_id = 1;
  void clear_ins_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id() const;
  void set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ins_id() const;
  void _internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ins_port = 2;
  void clear_ins_port();
  ::PROTOBUF_NAMESPACE_ID::int32 ins_port() const;
  void set_ins_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ins_port() const;
  void _internal_set_ins_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BuildConnRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ins_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BuildConnResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildConnResponse) */ {
 public:
  inline BuildConnResponse() : BuildConnResponse(nullptr) {}
  virtual ~BuildConnResponse();

  BuildConnResponse(const BuildConnResponse& from);
  BuildConnResponse(BuildConnResponse&& from) noexcept
    : BuildConnResponse() {
    *this = ::std::move(from);
  }

  inline BuildConnResponse& operator=(const BuildConnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildConnResponse& operator=(BuildConnResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildConnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildConnResponse* internal_default_instance() {
    return reinterpret_cast<const BuildConnResponse*>(
               &_BuildConnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BuildConnResponse& a, BuildConnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildConnResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildConnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildConnResponse* New() const final {
    return CreateMaybeMessage<BuildConnResponse>(nullptr);
  }

  BuildConnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildConnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildConnResponse& from);
  void MergeFrom(const BuildConnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildConnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildConnResponse";
  }
  protected:
  explicit BuildConnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BuildConnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DDSLockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DDSLockRequest) */ {
 public:
  inline DDSLockRequest() : DDSLockRequest(nullptr) {}
  virtual ~DDSLockRequest();

  DDSLockRequest(const DDSLockRequest& from);
  DDSLockRequest(DDSLockRequest&& from) noexcept
    : DDSLockRequest() {
    *this = ::std::move(from);
  }

  inline DDSLockRequest& operator=(const DDSLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DDSLockRequest& operator=(DDSLockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DDSLockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DDSLockRequest* internal_default_instance() {
    return reinterpret_cast<const DDSLockRequest*>(
               &_DDSLockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DDSLockRequest& a, DDSLockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DDSLockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DDSLockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DDSLockRequest* New() const final {
    return CreateMaybeMessage<DDSLockRequest>(nullptr);
  }

  DDSLockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DDSLockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DDSLockRequest& from);
  void MergeFrom(const DDSLockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DDSLockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DDSLockRequest";
  }
  protected:
  explicit DDSLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 1,
    kLockTypeFieldNumber = 2,
    kValueSizeFieldNumber = 3,
    kInsIdFieldNumber = 4,
  };
  // uint64 key_id = 1;
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key_id() const;
  void _internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 lock_type = 2;
  void clear_lock_type();
  ::PROTOBUF_NAMESPACE_ID::int32 lock_type() const;
  void set_lock_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lock_type() const;
  void _internal_set_lock_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value_size = 3;
  void clear_value_size();
  ::PROTOBUF_NAMESPACE_ID::int32 value_size() const;
  void set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_size() const;
  void _internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ins_id = 4;
  void clear_ins_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id() const;
  void set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ins_id() const;
  void _internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DDSLockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lock_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DDSLockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DDSLockResponse) */ {
 public:
  inline DDSLockResponse() : DDSLockResponse(nullptr) {}
  virtual ~DDSLockResponse();

  DDSLockResponse(const DDSLockResponse& from);
  DDSLockResponse(DDSLockResponse&& from) noexcept
    : DDSLockResponse() {
    *this = ::std::move(from);
  }

  inline DDSLockResponse& operator=(const DDSLockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DDSLockResponse& operator=(DDSLockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DDSLockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DDSLockResponse* internal_default_instance() {
    return reinterpret_cast<const DDSLockResponse*>(
               &_DDSLockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DDSLockResponse& a, DDSLockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DDSLockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DDSLockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DDSLockResponse* New() const final {
    return CreateMaybeMessage<DDSLockResponse>(nullptr);
  }

  DDSLockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DDSLockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DDSLockResponse& from);
  void MergeFrom(const DDSLockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DDSLockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DDSLockResponse";
  }
  protected:
  explicit DDSLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyIdFieldNumber = 1,
    kValueSizeFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 key_id = 1;
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key_id() const;
  void _internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 value_size = 3;
  void clear_value_size();
  ::PROTOBUF_NAMESPACE_ID::int32 value_size() const;
  void set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_size() const;
  void _internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DDSLockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ValidRequest) */ {
 public:
  inline ValidRequest() : ValidRequest(nullptr) {}
  virtual ~ValidRequest();

  ValidRequest(const ValidRequest& from);
  ValidRequest(ValidRequest&& from) noexcept
    : ValidRequest() {
    *this = ::std::move(from);
  }

  inline ValidRequest& operator=(const ValidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidRequest& operator=(ValidRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidRequest* internal_default_instance() {
    return reinterpret_cast<const ValidRequest*>(
               &_ValidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ValidRequest& a, ValidRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidRequest* New() const final {
    return CreateMaybeMessage<ValidRequest>(nullptr);
  }

  ValidRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidRequest& from);
  void MergeFrom(const ValidRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ValidRequest";
  }
  protected:
  explicit ValidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 1,
    kValueSizeFieldNumber = 2,
    kInsIdFieldNumber = 3,
  };
  // uint64 key_id = 1;
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key_id() const;
  void _internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 value_size = 2;
  void clear_value_size();
  ::PROTOBUF_NAMESPACE_ID::int32 value_size() const;
  void set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_size() const;
  void _internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ins_id = 3;
  void clear_ins_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id() const;
  void set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ins_id() const;
  void _internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ValidRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ins_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ValidResponse) */ {
 public:
  inline ValidResponse() : ValidResponse(nullptr) {}
  virtual ~ValidResponse();

  ValidResponse(const ValidResponse& from);
  ValidResponse(ValidResponse&& from) noexcept
    : ValidResponse() {
    *this = ::std::move(from);
  }

  inline ValidResponse& operator=(const ValidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidResponse& operator=(ValidResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidResponse* internal_default_instance() {
    return reinterpret_cast<const ValidResponse*>(
               &_ValidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ValidResponse& a, ValidResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidResponse* New() const final {
    return CreateMaybeMessage<ValidResponse>(nullptr);
  }

  ValidResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidResponse& from);
  void MergeFrom(const ValidResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ValidResponse";
  }
  protected:
  explicit ValidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyIdFieldNumber = 1,
    kValueSizeFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 key_id = 1;
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key_id() const;
  void _internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 value_size = 3;
  void clear_value_size();
  ::PROTOBUF_NAMESPACE_ID::int32 value_size() const;
  void set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_size() const;
  void _internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ValidResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// ===================================================================

class DDSService_Stub;

class DDSService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DDSService() {};
 public:
  virtual ~DDSService();

  typedef DDSService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void DDSLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DDSLockRequest* request,
                       ::DDSLockResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::EchoRequest* request,
                       ::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BuildConn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::BuildConnRequest* request,
                       ::BuildConnResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DDSService);
};

class DDSService_Stub : public DDSService {
 public:
  DDSService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DDSService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DDSService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DDSService ------------------------------------------

  void DDSLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DDSLockRequest* request,
                       ::DDSLockResponse* response,
                       ::google::protobuf::Closure* done);
  void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::EchoRequest* request,
                       ::EchoResponse* response,
                       ::google::protobuf::Closure* done);
  void BuildConn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::BuildConnRequest* request,
                       ::BuildConnResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DDSService_Stub);
};


// -------------------------------------------------------------------

class MasterService_Stub;

class MasterService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MasterService() {};
 public:
  virtual ~MasterService();

  typedef MasterService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Valid(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ValidRequest* request,
                       ::ValidResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::EchoRequest* request,
                       ::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService);
};

class MasterService_Stub : public MasterService {
 public:
  MasterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MasterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MasterService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MasterService ------------------------------------------

  void Valid(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ValidRequest* request,
                       ::ValidResponse* response,
                       ::google::protobuf::Closure* done);
  void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::EchoRequest* request,
                       ::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoRequest

// int32 ins_id = 1;
inline void EchoRequest::clear_ins_id() {
  ins_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EchoRequest::_internal_ins_id() const {
  return ins_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EchoRequest::ins_id() const {
  // @@protoc_insertion_point(field_get:EchoRequest.ins_id)
  return _internal_ins_id();
}
inline void EchoRequest::_internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ins_id_ = value;
}
inline void EchoRequest::set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ins_id(value);
  // @@protoc_insertion_point(field_set:EchoRequest.ins_id)
}

// string message = 2;
inline void EchoRequest::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:EchoRequest.message)
  return _internal_message();
}
inline void EchoRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:EchoRequest.message)
}
inline std::string* EchoRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:EchoRequest.message)
  return _internal_mutable_message();
}
inline const std::string& EchoRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoRequest::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EchoRequest.message)
}
inline std::string* EchoRequest::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:EchoRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:EchoRequest.message)
}

// -------------------------------------------------------------------

// EchoResponse

// string ip = 1;
inline void EchoResponse::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoResponse::ip() const {
  // @@protoc_insertion_point(field_get:EchoResponse.ip)
  return _internal_ip();
}
inline void EchoResponse::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:EchoResponse.ip)
}
inline std::string* EchoResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:EchoResponse.ip)
  return _internal_mutable_ip();
}
inline const std::string& EchoResponse::_internal_ip() const {
  return ip_.Get();
}
inline void EchoResponse::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoResponse::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EchoResponse.ip)
}
inline void EchoResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:EchoResponse.ip)
}
inline void EchoResponse::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EchoResponse.ip)
}
inline std::string* EchoResponse::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoResponse::release_ip() {
  // @@protoc_insertion_point(field_release:EchoResponse.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:EchoResponse.ip)
}

// -------------------------------------------------------------------

// BuildConnRequest

// int32 ins_id = 1;
inline void BuildConnRequest::clear_ins_id() {
  ins_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildConnRequest::_internal_ins_id() const {
  return ins_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildConnRequest::ins_id() const {
  // @@protoc_insertion_point(field_get:BuildConnRequest.ins_id)
  return _internal_ins_id();
}
inline void BuildConnRequest::_internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ins_id_ = value;
}
inline void BuildConnRequest::set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ins_id(value);
  // @@protoc_insertion_point(field_set:BuildConnRequest.ins_id)
}

// int32 ins_port = 2;
inline void BuildConnRequest::clear_ins_port() {
  ins_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildConnRequest::_internal_ins_port() const {
  return ins_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildConnRequest::ins_port() const {
  // @@protoc_insertion_point(field_get:BuildConnRequest.ins_port)
  return _internal_ins_port();
}
inline void BuildConnRequest::_internal_set_ins_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ins_port_ = value;
}
inline void BuildConnRequest::set_ins_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ins_port(value);
  // @@protoc_insertion_point(field_set:BuildConnRequest.ins_port)
}

// -------------------------------------------------------------------

// BuildConnResponse

// int32 status = 1;
inline void BuildConnResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildConnResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildConnResponse::status() const {
  // @@protoc_insertion_point(field_get:BuildConnResponse.status)
  return _internal_status();
}
inline void BuildConnResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void BuildConnResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:BuildConnResponse.status)
}

// -------------------------------------------------------------------

// DDSLockRequest

// uint64 key_id = 1;
inline void DDSLockRequest::clear_key_id() {
  key_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DDSLockRequest::_internal_key_id() const {
  return key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DDSLockRequest::key_id() const {
  // @@protoc_insertion_point(field_get:DDSLockRequest.key_id)
  return _internal_key_id();
}
inline void DDSLockRequest::_internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_id_ = value;
}
inline void DDSLockRequest::set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:DDSLockRequest.key_id)
}

// int32 lock_type = 2;
inline void DDSLockRequest::clear_lock_type() {
  lock_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockRequest::_internal_lock_type() const {
  return lock_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockRequest::lock_type() const {
  // @@protoc_insertion_point(field_get:DDSLockRequest.lock_type)
  return _internal_lock_type();
}
inline void DDSLockRequest::_internal_set_lock_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lock_type_ = value;
}
inline void DDSLockRequest::set_lock_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lock_type(value);
  // @@protoc_insertion_point(field_set:DDSLockRequest.lock_type)
}

// int32 value_size = 3;
inline void DDSLockRequest::clear_value_size() {
  value_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockRequest::_internal_value_size() const {
  return value_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockRequest::value_size() const {
  // @@protoc_insertion_point(field_get:DDSLockRequest.value_size)
  return _internal_value_size();
}
inline void DDSLockRequest::_internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_size_ = value;
}
inline void DDSLockRequest::set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_size(value);
  // @@protoc_insertion_point(field_set:DDSLockRequest.value_size)
}

// int32 ins_id = 4;
inline void DDSLockRequest::clear_ins_id() {
  ins_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockRequest::_internal_ins_id() const {
  return ins_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockRequest::ins_id() const {
  // @@protoc_insertion_point(field_get:DDSLockRequest.ins_id)
  return _internal_ins_id();
}
inline void DDSLockRequest::_internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ins_id_ = value;
}
inline void DDSLockRequest::set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ins_id(value);
  // @@protoc_insertion_point(field_set:DDSLockRequest.ins_id)
}

// -------------------------------------------------------------------

// DDSLockResponse

// uint64 key_id = 1;
inline void DDSLockResponse::clear_key_id() {
  key_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DDSLockResponse::_internal_key_id() const {
  return key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DDSLockResponse::key_id() const {
  // @@protoc_insertion_point(field_get:DDSLockResponse.key_id)
  return _internal_key_id();
}
inline void DDSLockResponse::_internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_id_ = value;
}
inline void DDSLockResponse::set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:DDSLockResponse.key_id)
}

// bytes value = 2;
inline void DDSLockResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DDSLockResponse::value() const {
  // @@protoc_insertion_point(field_get:DDSLockResponse.value)
  return _internal_value();
}
inline void DDSLockResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DDSLockResponse.value)
}
inline std::string* DDSLockResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:DDSLockResponse.value)
  return _internal_mutable_value();
}
inline const std::string& DDSLockResponse::_internal_value() const {
  return value_.Get();
}
inline void DDSLockResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DDSLockResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DDSLockResponse.value)
}
inline void DDSLockResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DDSLockResponse.value)
}
inline void DDSLockResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DDSLockResponse.value)
}
inline std::string* DDSLockResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DDSLockResponse::release_value() {
  // @@protoc_insertion_point(field_release:DDSLockResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DDSLockResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DDSLockResponse.value)
}

// int32 value_size = 3;
inline void DDSLockResponse::clear_value_size() {
  value_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockResponse::_internal_value_size() const {
  return value_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockResponse::value_size() const {
  // @@protoc_insertion_point(field_get:DDSLockResponse.value_size)
  return _internal_value_size();
}
inline void DDSLockResponse::_internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_size_ = value;
}
inline void DDSLockResponse::set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_size(value);
  // @@protoc_insertion_point(field_set:DDSLockResponse.value_size)
}

// int32 status = 4;
inline void DDSLockResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DDSLockResponse::status() const {
  // @@protoc_insertion_point(field_get:DDSLockResponse.status)
  return _internal_status();
}
inline void DDSLockResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void DDSLockResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DDSLockResponse.status)
}

// -------------------------------------------------------------------

// ValidRequest

// uint64 key_id = 1;
inline void ValidRequest::clear_key_id() {
  key_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidRequest::_internal_key_id() const {
  return key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidRequest::key_id() const {
  // @@protoc_insertion_point(field_get:ValidRequest.key_id)
  return _internal_key_id();
}
inline void ValidRequest::_internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_id_ = value;
}
inline void ValidRequest::set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:ValidRequest.key_id)
}

// int32 value_size = 2;
inline void ValidRequest::clear_value_size() {
  value_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidRequest::_internal_value_size() const {
  return value_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidRequest::value_size() const {
  // @@protoc_insertion_point(field_get:ValidRequest.value_size)
  return _internal_value_size();
}
inline void ValidRequest::_internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_size_ = value;
}
inline void ValidRequest::set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_size(value);
  // @@protoc_insertion_point(field_set:ValidRequest.value_size)
}

// int32 ins_id = 3;
inline void ValidRequest::clear_ins_id() {
  ins_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidRequest::_internal_ins_id() const {
  return ins_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidRequest::ins_id() const {
  // @@protoc_insertion_point(field_get:ValidRequest.ins_id)
  return _internal_ins_id();
}
inline void ValidRequest::_internal_set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ins_id_ = value;
}
inline void ValidRequest::set_ins_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ins_id(value);
  // @@protoc_insertion_point(field_set:ValidRequest.ins_id)
}

// -------------------------------------------------------------------

// ValidResponse

// uint64 key_id = 1;
inline void ValidResponse::clear_key_id() {
  key_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidResponse::_internal_key_id() const {
  return key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidResponse::key_id() const {
  // @@protoc_insertion_point(field_get:ValidResponse.key_id)
  return _internal_key_id();
}
inline void ValidResponse::_internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_id_ = value;
}
inline void ValidResponse::set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:ValidResponse.key_id)
}

// bytes value = 2;
inline void ValidResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ValidResponse::value() const {
  // @@protoc_insertion_point(field_get:ValidResponse.value)
  return _internal_value();
}
inline void ValidResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ValidResponse.value)
}
inline std::string* ValidResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ValidResponse.value)
  return _internal_mutable_value();
}
inline const std::string& ValidResponse::_internal_value() const {
  return value_.Get();
}
inline void ValidResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValidResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ValidResponse.value)
}
inline void ValidResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ValidResponse.value)
}
inline void ValidResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ValidResponse.value)
}
inline std::string* ValidResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValidResponse::release_value() {
  // @@protoc_insertion_point(field_release:ValidResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValidResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ValidResponse.value)
}

// int32 value_size = 3;
inline void ValidResponse::clear_value_size() {
  value_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidResponse::_internal_value_size() const {
  return value_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidResponse::value_size() const {
  // @@protoc_insertion_point(field_get:ValidResponse.value_size)
  return _internal_value_size();
}
inline void ValidResponse::_internal_set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_size_ = value;
}
inline void ValidResponse::set_value_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_size(value);
  // @@protoc_insertion_point(field_set:ValidResponse.value_size)
}

// int32 status = 4;
inline void ValidResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValidResponse::status() const {
  // @@protoc_insertion_point(field_get:ValidResponse.status)
  return _internal_status();
}
inline void ValidResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ValidResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ValidResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lock_5fservice_2eproto
